# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AuthInput {
  email: String!
  password: String!
}

type AuthResponse {
  cart: [CartItem!]!
  email: String!
  history: [HistoryItem!]!
  isAdmin: Boolean!
  isAuth: Boolean!
  lastname: String!
  name: String!
  role: Float!
}

"""Brand"""
type Brand {
  _id: ObjectId!
  name: String!
}

type CartItem {
  date: DateTimeISO!
  productId: Product!
  quantity: Float!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input FiltersInput {
  brand: [ObjectId]!
  frets: [Float]!
  price: [Float]!
  wood: [ObjectId]!
}

"""User Purchase History Item"""
type HistoryItem {
  brand: String!
  dateOfPurchase: Float!
  name: String!
  paymentId: String!
  price: Float!
  productId: ObjectId!
  quantity: Float!
}

input ImageInput {
  public_id: String!
  url: String!
}

type ImageType {
  public_id: String!
  url: String!
}

type Mutation {
  addBrand(name: String!): SuccessResponse!
  addProduct(productInput: ProductInput!): SuccessResponse!
  addProductToCart(productId: ObjectId!): SuccessResponse!
  addWood(name: String!): SuccessResponse!
  captureOrder(orderId: String!): PayPalCaptureOrderResponse!
  createOrder: PayPalCreateOrderResponse!
  login(input: AuthInput!): UserResponse!
  logout: SuccessResponse!
  register(input: RegisterInput!): SuccessResponse!
  removeImage(public_id: String!): SuccessResponse!
  removeProductFromCart(productId: ObjectId!): SuccessResponse!
  updateProfile(profileInput: UpdateProfileInput!): SuccessResponse!
  updateSiteInfo(name: String!, siteInfoInput: SiteInfoInput!): SuccessResponse!
}

"""Mongo id scalar type"""
scalar ObjectId

type PayPalCaptureOrderResponse {
  id: String!
  status: String!
}

type PayPalCreateOrderResponse {
  id: String!
  links: [PayPalLinkItem!]!
  status: String!
}

type PayPalLinkItem {
  href: String!
  method: RequestMethod!
  rel: RequestRelation!
}

"""Product"""
type Product {
  _id: ObjectId!
  available: Boolean!
  brand: Brand!
  createdAt: DateTimeISO!
  description: String!
  frets: Float!
  images: [ImageType]!
  name: String!
  price: Float!
  publish: Boolean!
  shipping: Boolean!
  sold: Float!
  wood: Wood!
}

input ProductInput {
  available: Boolean!
  brand: String!
  description: String!
  frets: Float!
  images: [ImageInput!]
  name: String!
  price: Float!
  publish: Boolean!
  shipping: Boolean!
  wood: String!
}

type ProductShopResponse {
  products: [Product]!
  size: Float!
}

type Query {
  auth: AuthResponse
  getAllBrands: [Brand!]
  getAllProducts: [Product!]
  getAllWoods: [Wood!]
  getCartProducts: [CartItem!]
  getProductsById(items: String!, type: String!): [Product!]
  getProductsToShop(filters: FiltersInput, limit: Float, order: SortOrderScalar, skip: Float, sortBy: SortBy): ProductShopResponse!
  getSiteData: Site!
  getSortedProducts(limit: Float, order: SortOrderScalar, sortBy: SortBy): [Product!]!
  getsProductsByArrival: [Product!]
  user(userId: ObjectId!): User
}

input RegisterInput {
  email: String!
  lastname: String!
  name: String!
  password: String!
}

"""Allowed request methods"""
enum RequestMethod {
  GET
  PATCH
  POST
}

"""Allowed request relations"""
enum RequestRelation {
  APPROVE
  CAPTURE
  SELF
  UPDATE
}

"""Site"""
type Site {
  _id: ObjectId!
  featured: [String]!
  name: String!
  siteInfo: [SiteInfoItem]!
}

input SiteInfoInput {
  address: String!
  email: String!
  hours: String!
  phone: String!
}

type SiteInfoItem {
  address: String!
  email: String!
  hours: String!
  phone: String!
}

"""Allowable sort order values"""
enum SortBy {
  _id
  createdAt
  sold
}

"""Mongoose Sort Order Scalar"""
scalar SortOrderScalar

type SuccessResponse {
  success: Boolean!
}

input UpdateProfileInput {
  email: String!
  lastname: String!
  name: String!
}

"""User"""
type User {
  _id: ObjectId!
  cart: [CartItem]!
  email: String!
  history: [HistoryItem]!
  lastname: String!
  name: String!
  role: Float!
  token: String
}

type UserResponse {
  user: User!
}

"""Wood"""
type Wood {
  _id: ObjectId!
  name: String!
}